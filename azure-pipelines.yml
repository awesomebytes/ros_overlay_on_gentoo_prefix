# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# Everything must be under a 'job' to be able to set the timeoutInMinutes
jobs:
  - job: "build_ros_melodic_ros_base_1"
    timeoutInMinutes: 0

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_ros_base_setup

    steps:
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    # We divide the boostrap in 3 parts to not go over the 6h limit as gcc takes ages
    - script: cd ros_base && docker build -f Dockerfile -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    # The variables are set on the Build options on the web interface
    # # Try to tag the latest failed image we ran
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

  - job: "build_ros_melodic_ros_base_2"
    timeoutInMinutes: 0
    dependsOn: "build_ros_melodic_ros_base_1"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_ros_base

    steps:
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    # We divide the boostrap in 3 parts to not go over the 6h limit as gcc takes ages
    - script: cd ros_base && docker build -f Dockerfile2 -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    # The variables are set on the Build options on the web interface
    # # Try to tag the latest failed image we ran
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()
 
  - job: package_stage_ros_base
    timeoutInMinutes: 0
    dependsOn: "build_ros_melodic_ros_base_2"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_ros_base_package_stage
      platform: amd64
      rosdistro: ros-melodic
      bundlename: ros_base

    steps:
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    - script: docker system prune -a -f
      displayName: 'clear disk space'

    - script: cd package_stage && docker build -f Dockerfile.ros_base -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build package_stage'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

    - script: docker run --entrypoint /tmp/gentoo/executeonprefix $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)  "tar -c --lzma -f - -C /tmp gentoo" > ~/gentoo_on_tmp.tar.lzma
      displayName: 'Create .tar.lzma of /tmp/gentoo'

    # # Create a temporal container to copy the gentoo_on_tmp.tar.gz
    # - script: |
    #     id=$(docker create $(DockerHub_user)/$(docker_image_name))
    #     docker cp $id:/tmp/gentoo_on_tmp.tar.gz $HOME
    #   displayName: 'Extract gentoo_on_tmp.tar.gz from Docker image'
    # Not really needed
    # - script: docker rm -v $id
    # Make a release
    - script: python -m pip install --upgrade pip setuptools wheel
      displayName: 'Install tools'
    - script: python -m pip install --user githubrelease
      displayName: 'Install tools 2'
    - script: |
        export DATE=$(date -I'minutes' | sed 's/+/plus/g'| sed 's/:/at/g')
        export RELEASE_TAG=release/${DATE}
        export RELEASE_FILE_NAME=gentoo_on_tmp_with_$(rosdistro)_$(bundlename)-${PLATFORM}_${DATE}.tar.lzma
        export RELEASE_NAME="Gentoo Prefix on /tmp/gentoo ROS Melodic $(bundlename)"
        export BODY="Use ROS Melodic on Gentoo Prefix with: cat ${RELEASE_FILE_NAME}.part-* > ${RELEASE_FILE_NAME}; tar xvf gentoo_on_tmp*.tar.lzma; ./gentoo/startprefix"
        mv $HOME/gentoo_on_tmp.tar.lzma ${RELEASE_FILE_NAME}
        docker system prune -a -f
        split -b 1024MB -d ${RELEASE_FILE_NAME} ${RELEASE_FILE_NAME}.part-
        rm ${RELEASE_FILE_NAME}
        export PATH=$HOME/.local/bin:$PATH
        export PYTHONPATH=$HOME/.local/lib/python2.7/site-packages:$PYTHONPATH
        githubrelease --github-token $(GitHub_Token) release $(Build.Repository.Name) create "${RELEASE_TAG}" --publish --name "${RELEASE_NAME}" --body "${BODY}" "${RELEASE_FILE_NAME}.part-*"
      displayName: 'Create Release'



  - job: "build_ros_melodic_desktop_1"
    timeoutInMinutes: 0
    dependsOn: "build_ros_melodic_ros_base_2"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_desktop_1

    steps:
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    - script: cd desktop && docker build -f Dockerfile -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    # The variables are set on the Build options on the web interface
    # # Try to tag the latest failed image we ran
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

  - job: "build_ros_melodic_desktop_2"
    timeoutInMinutes: 0
    dependsOn: "build_ros_melodic_desktop_1"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_desktop_2

    steps:
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    - script: cd desktop && docker build -f Dockerfile2 -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

  - job: "build_ros_melodic_desktop_3"
    timeoutInMinutes: 0
    dependsOn: "build_ros_melodic_desktop_2"

    # pool: magiclab
    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_desktop_3

    steps:
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    - script: cd desktop && docker build -f Dockerfile3 -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()

    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()
 
  - job: package_stage_desktop
    timeoutInMinutes: 0
    dependsOn: "build_ros_melodic_desktop_3"

    pool:
      vmImage: 'Ubuntu 16.04'

    variables:
      docker_image_name: roogp_ros_melodic_desktop_package_stage
      platform: amd64
      rosdistro: ros-melodic
      bundlename: desktop

    steps:
    # The variables are set on the Build options on the web interface
    - script: docker login -u $(DockerHub_user) -p $(DockerHub_password)
      displayName: 'docker login'
    - script: docker system prune -a -f
      displayName: 'clear disk space'

    - script: cd package_stage && docker build -f Dockerfile.desktop -t $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) .
      displayName: 'docker build package_stage'
      # This means up to 6h
      timeoutInMinutes: 0
      # Even if it fails I want to push the image to DockerHub for inspection
    - script: docker tag `docker ps -a -l -q | xargs docker commit | awk -F":" '{print $2}'` $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'create image to push to DockerHub'
      condition: failed()
    # Push it
    - script: docker push $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)
      displayName: 'push image to DockerHub'
      condition: always()
    # Tag as :latest too
    - script: docker tag $(DockerHub_user)/$(docker_image_name):$(Build.BuildId) $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'tag as latest'
      # condition: always()
    # Push as latest
    - script: docker push $(DockerHub_user)/$(docker_image_name):latest
      displayName: 'push latest to DockerHub'
      # condition: always()

    # As we run into HD space problems (only 10GB available
    # and the docker image is already 4.0GB compressed, so on a container
    # it is twice as big...) we have 7GB RAM available
    - script: sudo mkdir /mnt/ramdisk && sudo mount -t tmpfs -o rw,size=5G tmpfs /mnt/ramdisk
      displayName: 'create RAM disk for output'

    - script: docker run --rm --entrypoint /tmp/gentoo/executeonprefix $(DockerHub_user)/$(docker_image_name):$(Build.BuildId)  "tar -c --lzma -f - -C /tmp gentoo" > /mnt/ramdisk/gentoo_on_tmp.tar.lzma; ls -lah /mnt/ramdisk
      displayName: 'Create .tar.lzma of /tmp/gentoo'

    # # Create a temporal container to copy the gentoo_on_tmp.tar.gz
    # - script: |
    #     id=$(docker create $(DockerHub_user)/$(docker_image_name))
    #     docker cp $id:/tmp/gentoo_on_tmp.tar.gz $HOME
    #   displayName: 'Extract gentoo_on_tmp.tar.gz from Docker image'
    # Not really needed
    # - script: docker rm -v $id
    # Make a release
    - script: python -m pip install --upgrade pip setuptools wheel
      displayName: 'Install tools'
    - script: python -m pip install --user githubrelease
      displayName: 'Install tools 2'
    - script: |
        export DATE=$(date -I'minutes' | sed 's/+/plus/g'| sed 's/:/at/g')
        export RELEASE_TAG=release/${DATE}
        export RELEASE_FILE_NAME=gentoo_on_tmp_with_$(rosdistro)_$(bundlename)-${PLATFORM}_${DATE}.tar.lzma
        export RELEASE_NAME="Gentoo Prefix on /tmp/gentoo with ROS Melodic $(bundlename)"
        export BODY="Use ROS Melodic on Gentoo Prefix with: cat ${RELEASE_FILE_NAME}.part-* > ${RELEASE_FILE_NAME}; tar xvf gentoo_on_tmp*.tar.lzma; ./gentoo/startprefix"
        docker system prune -a -f
        mv /mnt/ramdisk/gentoo_on_tmp.tar.lzma $HOME/${RELEASE_FILE_NAME}
        cd $HOME
        split -b 1536MB -d ${RELEASE_FILE_NAME} ${RELEASE_FILE_NAME}.part-
        rm ${RELEASE_FILE_NAME}
        export PATH=$HOME/.local/bin:$PATH
        export PYTHONPATH=$HOME/.local/lib/python2.7/site-packages:$PYTHONPATH
        githubrelease --github-token $(GitHub_Token) release $(Build.Repository.Name) create "${RELEASE_TAG}" --publish --name "${RELEASE_NAME}" --body "${BODY}" "${RELEASE_FILE_NAME}.part-*"
      displayName: 'Create Release'